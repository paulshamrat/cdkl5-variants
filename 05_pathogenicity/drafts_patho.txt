# 01 PolyPhen2


#!/usr/bin/env python3
import pandas as pd
import subprocess

# ─── 0. Paths ────────────────────────────────────────────────────────────────
cdkl5_variants    = "/project/ealexov/compbio/shamrat/250519_energy/00_data/" \
                    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg.xlsx"
batch_out         = "/project/ealexov/compbio/shamrat/250519_energy/" \
                    "05_pathogenicity/01_polyphen2/cdkl5_mutation_polyphen2.txt"
tsv_in            = "/project/ealexov/compbio/shamrat/250519_energy/" \
                    "05_pathogenicity/01_polyphen2/" \
                    "cdkl5_mutation_polyphen2_results.tsv"
polyphen2_results = "/project/ealexov/compbio/shamrat/250519_energy/" \
                    "05_pathogenicity/01_polyphen2/" \
                    "cdkl5_mutation_polyphen2_results.xlsx"
merged_out        = "/project/ealexov/compbio/shamrat/250519_energy/" \
                    "05_pathogenicity/01_polyphen2/" \
                    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_polyphen2.xlsx"

uniprot_id = "O76039"


# ─── 1.1 Prepare batch submission for webserver ──────────────────────────────
df = pd.read_excel(cdkl5_variants)
for col in ("wild", "position", "mutant"):
    if col not in df.columns:
        raise KeyError(f"Column '{col}' not found in {cdkl5_variants}")

lines = []
for _, row in df.iterrows():
    wt, pos, mt = row["wild"], row["position"], row["mutant"]
    if pd.isna(wt) or pd.isna(pos) or pd.isna(mt):
        continue
    lines.append(f"{uniprot_id} {int(pos)} {wt} {mt}")

with open(batch_out, "w") as fo:
    fo.write("\n".join(lines))
print(f"Wrote {len(lines)} variants to {batch_out}")


# ─── 1.2 Preview batch file head ────────────────────────────────────────────
subprocess.run(["head", batch_out])


# ─── 1.3 Convert returned TSV → Excel ────────────────────────────────────────
df_pp2 = pd.read_csv(tsv_in, sep="\t", engine="python")
df_pp2.columns = [c.strip().lstrip("#") for c in df_pp2.columns]
df_pp2.to_excel(polyphen2_results, index=False)
print(f"Wrote {len(df_pp2)} rows to {polyphen2_results}")


# ─── 1.4 Preview the new Excel & original columns ───────────────────────────
df_check = pd.read_excel(polyphen2_results)
print("PolyPhen-2 results head:\n", df_check.head().to_string(), "\n")
df_orig = pd.read_excel(cdkl5_variants)
print("cdkl5_variants columns:", df_orig.columns.tolist())


# ─── 1.5 Merge PolyPhen-2 into your variants (1:1 mapping) ───────────────────
variants_df = pd.read_excel(cdkl5_variants)
pp2_df       = pd.read_excel(polyphen2_results)

# Normalize key columns
variants_df['position'] = variants_df['position'].astype(int)
pp2_df['pos']          = pp2_df['pos'].astype(int)

# Select + rename
cols_to_pull = ['pos', 'prediction', 'pph2_prob', 'pph2_FPR', 'pph2_TPR']
pp2_small    = pp2_df[cols_to_pull].rename(columns={'pos': 'position'})

# Drop any duplicate positions (keep the first)
pp2_unique = pp2_small.drop_duplicates(subset='position', keep='first')

# Map back onto the original DataFrame
lookup = pp2_unique.set_index('position')
for col in ['prediction', 'pph2_prob', 'pph2_FPR', 'pph2_TPR']:
    variants_df[col] = variants_df['position'].map(lookup[col])

# Optional diagnostics
missing = variants_df['prediction'].isna().sum()
print(f"{missing} out of {len(variants_df)} variants had NO PolyPhen-2 result.")
extra_pp2 = set(pp2_unique['position']) - set(variants_df['position'])
print(f"{len(extra_pp2)} PolyPhen-2 positions didn’t match any original variants.")

# Write merged file
variants_df.to_excel(merged_out, index=False)
print(f"Wrote {len(variants_df)} rows (1:1 mapping) to {merged_out}")







import pandas as pd
from IPython.display import display

file_path = '/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/01_polyphen2/01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_polyphen2.xlsx'

# Read Excel
df = pd.read_excel(file_path)

# Display the first few rows (nicely in Jupyter/IPython)
display(df.head())

# Print column names as a list
def print_column_names(dataframe):
    print("🧩 Column names:")
    for col in dataframe.columns:
        print(f"- {col}")

print_column_names(df)





import pandas as pd

# Load the merged table
file_path = (
    "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/01_polyphen2/"
    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_polyphen2.xlsx"
)
df = pd.read_excel(file_path)

# 1) Ensure 'position' is numeric, then filter to 1–302
df['position'] = pd.to_numeric(df['position'], errors='coerce')
df = df[df['position'].between(1, 302)]

# 2) Germline classification counts
germ_counts = df['Germline classification'] \
    .value_counts(dropna=False) \
    .rename_axis('Germline classification') \
    .reset_index(name='Count')
print("Germline classification (positions 1–302):")
print(germ_counts.to_string(index=False))

# 3) Raw PolyPhen-2 prediction counts (all three classes)
df['prediction_clean'] = df['prediction'].str.lower().str.strip()
raw_pred_counts = df['prediction_clean'] \
    .value_counts(dropna=False) \
    .rename_axis('PolyPhen-2 prediction') \
    .reset_index(name='Count')
print("\nPolyPhen-2 predictions (positions 1–302):")
print(raw_pred_counts.to_string(index=False))





import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Patch

def plot_reclassification(
    df: pd.DataFrame,
    position_range=(1, 302),
    figsize=(10, 6),
    title_fontsize=16,
    label_fontsize=14,
    tick_fontsize=12,
    annotation_fontsize=10,
    bar_width_ratio=0.8,
    colors=None,
    title=None
):
    """
    Plot original Germline classification counts alongside PolyPhen-2 prediction breakdown.
    Allows separate control of title, label, tick, and annotation font sizes.

    Parameters:
    - df: DataFrame with columns 'position', 'Germline classification', 'prediction'
    - position_range: tuple(min, max) to filter 'position'
    - figsize: tuple(width, height)
    - title_fontsize: font size for the title
    - label_fontsize: font size for axis labels
    - tick_fontsize: font size for tick labels
    - annotation_fontsize: font size for the bar count annotations
    - bar_width_ratio: total width occupied by all bars per group (fraction of 1)
    - colors: dict mapping 'original' and prediction labels to colors
    - title: optional plot title
    """
    # Filter & clean
    df = df[df['position'].between(*position_range)].copy()
    df['prediction_clean'] = df['prediction'].str.lower().str.strip()

    # Prepare data
    preds = ['benign', 'possibly damaging', 'probably damaging']
    cross = pd.crosstab(df['Germline classification'], df['prediction_clean'])[preds]
    original = df['Germline classification'].value_counts().reindex(cross.index)

    # Default colors
    if colors is None:
        colors = {
            'original': '#AAAAAA',
            'benign': '#0072B2',
            'possibly damaging': '#F28E2B',
            'probably damaging': '#D55E00'
        }

    fig, ax = plt.subplots(figsize=figsize)

    n_groups = len(cross)
    n_bars = 1 + len(preds)
    total_width = bar_width_ratio
    bar_width = total_width / n_bars
    x = np.arange(n_groups)

    # Plot
    for i, key in enumerate(['original'] + preds):
        counts = original.values if key == 'original' else cross[key].values
        offset = -total_width/2 + i * bar_width + bar_width/2
        positions = x + offset
        ax.bar(positions, counts, bar_width, color=colors[key],
               label='Original' if key=='original' else key.capitalize())
        # Annotate
        for pos, cnt in zip(positions, counts):
            ax.text(pos, cnt + max(original.max(), cross.values.max())*0.02,
                    str(int(cnt)), ha='center', va='bottom',
                    fontsize=annotation_fontsize)

    # Axes & Title
    ax.set_xticks(x)
    ax.set_xticklabels(cross.index, rotation=45, ha='right', fontsize=tick_fontsize)
    ax.set_xlabel('Germline classification (Original)', fontsize=label_fontsize)
    ax.set_ylabel('Number of variants', fontsize=label_fontsize)
    ax.set_title(title or f'Reclassification vs. Original Counts\n(Positions {position_range[0]}–{position_range[1]})',
                 fontsize=title_fontsize)

    # Legend above
    handles = [Patch(color=colors['original'], label='Original')] + \
              [Patch(color=colors[p], label=p.capitalize()) for p in preds]
    ax.legend(handles=handles, title='Category',
              loc='lower center', bbox_to_anchor=(0.5, 1.02),
              ncol=len(handles), frameon=False, fontsize=tick_fontsize, title_fontsize=label_fontsize)

    ax.grid(axis='y', linestyle='--', alpha=0.5)
    plt.tight_layout()
    plt.show()


# -----------------------
# Example usage:
# -----------------------
if __name__ == "__main__":
    # Load your merged table
    file_path = (
        "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/01_polyphen2/"
        "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_polyphen2.xlsx"
    )
    df_merged = pd.read_excel(file_path)

    # Plot with custom font sizes
    plot_reclassification(
        df_merged,
        position_range=(1, 302),
        figsize=(8, 6),
        title_fontsize=10,
        label_fontsize=11,
        tick_fontsize=11,
        annotation_fontsize=10,
        bar_width_ratio=0.8,
        title="PolyPhen-2; Pos: 1–302)"
    )






import pandas as pd
from IPython.display import display

# 1) Load your merged PolyPhen-2 results table
file_path = (
    "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/01_polyphen2/"
    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_polyphen2.xlsx"
)
df = pd.read_excel(file_path)

# 2) Select the columns you asked for
cols = [
    'mutation',
    'position',
    'Germline classification',
    'prediction',
    'pph2_prob',
    'pph2_FPR',
    'pph2_TPR'
]

# 3) Display the first five rows in IPython
display(df[cols].head())









# 02 MutPred2
## MutPred2
## 2.1 Prepare fasta file with mutation for Mutpred2
#!/usr/bin/env python3
import os
import requests
import pandas as pd
from textwrap import wrap

# ─────── CONFIG ───────
UNIPROT_ID = "O76039"
OUT_DIR    = "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/02_mutpred2"
BASENAME   = "cdkl5_mutation_mutpred2"
XLSX_PATH  = "/project/ealexov/compbio/shamrat/250519_energy/00_data/01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af.xlsx"
WILD_COL   = "wild"
POS_COL    = "position"
MUT_COL    = "mutant"
SPECIES_TAG= "CDKL5_HUMAN"
MAX_PER    = 100
# ──────────────────────

# 1) fetch WT sequence from UniProt
url   = f"https://rest.uniprot.org/uniprotkb/{UNIPROT_ID}.fasta"
resp  = requests.get(url)
resp.raise_for_status()
lines = resp.text.strip().splitlines()
seq   = "".join(lines[1:])

# 2) read your spreadsheet & build mutation tags
df   = pd.read_excel(XLSX_PATH, usecols=[WILD_COL,POS_COL,MUT_COL])
tags = [f"{wt}{int(pos)}{mt}" for wt,pos,mt in df.itertuples(index=False)]

# 3) chunk into ≤MAX_PER and write one FASTA per chunk
os.makedirs(OUT_DIR, exist_ok=True)
for i in range(0, len(tags), MAX_PER):
    chunk = tags[i : i+MAX_PER]
    idx   = i//MAX_PER + 1
    out_f = os.path.join(OUT_DIR, f"{BASENAME}_part{idx}.fasta")
    with open(out_f, "w") as fh:
        header = f">{SPECIES_TAG}_part{idx} " + " ".join(chunk)
        fh.write(header + "\n")
        for line in wrap(seq, 60):
            fh.write(line + "\n")
    print(f"→ wrote {out_f}")




# submit it on server



## 2.3 Read Mutpred2 part1 and part2 csv

# === 2.3a View the first few lines of your MutPred2 result CSVs ===S
print('=== 2.3a View the first few lines of your MutPred2 result CSVs ===')

import pandas as pd

# Updated paths with your new filenames
part1_csv = "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/02_mutpred2/" \
            "cdkl5_mutation_mutpred2_part1_result.csv"
part2_csv = "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/02_mutpred2/" \
            "cdkl5_mutation_mutpred2_part2_result.csv"

# Load and display the first 5 rows of part 1
df1 = pd.read_csv(part1_csv)
print(f"Head of {part1_csv}:")
print(df1.head().to_string(), "\n")

# Load and display the first 5 rows of part 2
df2 = pd.read_csv(part2_csv)
print(f"Head of {part2_csv}:")
print(df2.head().to_string())








# === 2.3b Combine your two MutPred2 CSVs into one table with proper headers ===

import pandas as pd
import os

# paths to your part-1 and part-2 result CSVs
dir02 = "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/02_mutpred2"
part1_csv = os.path.join(dir02, "cdkl5_mutation_mutpred2_part1_result.csv")
part2_csv = os.path.join(dir02, "cdkl5_mutation_mutpred2_part2_result.csv")

# 1) Define the column names in the correct order
column_names = [
    "ID",
    "Substitution",
    "MutPred2_score",
    "Molecular_mechanisms",
    "Affected_PROSITE_and_ELM_Motifs",
    "Remarks"
]

# 2) Read each CSV without a header row, assigning your names
df1 = pd.read_csv(part1_csv, header=None, names=column_names)
df2 = pd.read_csv(part2_csv, header=None, names=column_names)

# 3) Concatenate into a single DataFrame
combined = pd.concat([df1, df2], ignore_index=True)

# 4) (Optional) inspect the first few rows
print(combined.head().to_string())

# 5) Write out to a new Excel file, matching your filename style
out_xlsx = os.path.join(
    dir02,
    "cdkl5_mutation_mutpred2_results_combined.xlsx"
)
combined.to_excel(out_xlsx, index=False)
print(f"Wrote combined MutPred2 results to {out_xlsx}")




# === 2.3c Merge MutPred2 into your CDKL5 variants and save ===

import pandas as pd
import os

# paths
variants_xlsx = "/project/ealexov/compbio/shamrat/250519_energy/00_data/" \
                "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg.xlsx"
mutpred2_dir  = "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/02_mutpred2"

# use the exact combined filename you generated
combined_xlsx = os.path.join(
    mutpred2_dir,
    "cdkl5_mutation_mutpred2_results_combined.xlsx"
)

# 1) Read your original variants and the combined MutPred2 results
variants_df = pd.read_excel(variants_xlsx, engine="openpyxl")
mutpred_df  = pd.read_excel(combined_xlsx, engine="openpyxl")

# 2) Merge on the variant string: 'mutation' in variants matches 'Substitution' in MutPred2
merged = variants_df.merge(
    mutpred_df,
    left_on="mutation",
    right_on="Substitution",
    how="left"
)

# 3) Write out to Excel, appending '_mutpred2' to the original base name
base = os.path.splitext(os.path.basename(variants_xlsx))[0]
out_path = os.path.join(
    mutpred2_dir,
    f"{base}_mutpred2.xlsx"
)
merged.to_excel(out_path, index=False)
print(f"Wrote merged MutPred2 annotations to {out_path}")





import pandas as pd
from IPython.display import display

# 1) Load your merged MutPred2 results
file_path = (
    "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/02_mutpred2/"
    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_mutpred2.xlsx"
)
df = pd.read_excel(file_path, engine="openpyxl")

# 2) Print all column names
print("Columns in the DataFrame:")
print(df.columns.tolist(), "\n")

# 3) Display the first five rows of key columns
cols = [
    "mutation",
    "position",
    "Germline classification",
    "Substitution",
    "MutPred2_score",
    "Molecular_mechanisms",
    "Affected_PROSITE_and_ELM_Motifs",
    "Remarks"
]
display(df[cols].head())










import pandas as pd
import os

# Directory containing your MutPred2 Excel
mutpred2_dir = "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/02_mutpred2"

# Input and output filenames
infile  = "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_mutpred2.xlsx"
# Keep 'mutpred2' at the end of the filename
outfile = "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_classified_mutpred2.xlsx"

# Paths
in_path  = os.path.join(mutpred2_dir, infile)
out_path = os.path.join(mutpred2_dir, outfile)

# 1) Load the merged MutPred2 results
df = pd.read_excel(in_path, engine="openpyxl")

# 2) Add classification column at 0.67 threshold
df['MutPred2_classification'] = df['MutPred2_score'].apply(
    lambda x: 'Pathogenic' if x >= 0.67 else 'Benign'
)

# 3) Save the new file
df.to_excel(out_path, index=False)
print(f"Wrote results with MutPred2 classification to:\n  {out_path}")











import pandas as pd
from IPython.display import display

# 1) Path to your classified MutPred2 results file
file_path = (
    "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/02_mutpred2/"
    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_classified_mutpred2.xlsx"
)

# 2) Read the Excel into a DataFrame
df = pd.read_excel(file_path, engine="openpyxl")

# 3) Define columns to display
cols = [
    "mutation",
    "position",
    "Germline classification",
    "MutPred2_score",
    "MutPred2_classification",
    "Molecular_mechanisms",
    "Affected_PROSITE_and_ELM_Motifs",
    "Remarks"
]

# 4) Print the column names
print("Displayed columns:")
print(cols, "\n")

# 5) Display the first five rows
display(df[cols].head())





import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Patch

def plot_mutpred2_reclassification(
    df: pd.DataFrame,
    position_range=(1, 302),
    figsize=(10, 6),
    title_fontsize=16,
    label_fontsize=14,
    tick_fontsize=12,
    annotation_fontsize=10,
    bar_width_ratio=0.8,
    colors=None,
    title=None
):
    """
    Plot original Germline classification counts alongside MutPred2 reclassification.

    Parameters:
    - df: DataFrame with 'position', 'Germline classification', 'MutPred2_classification'
    - position_range: tuple(min, max) to filter 'position'
    - figsize: tuple(width, height) for figure
    - title_fontsize: fontsize for title
    - label_fontsize: fontsize for axis labels
    - tick_fontsize: fontsize for tick labels
    - annotation_fontsize: fontsize for bar annotations
    - bar_width_ratio: total group width fraction
    - colors: dict mapping 'Original', 'Benign', 'Pathogenic' to colors
    - title: optional plot title
    """
    # Filter and subset
    df = df[df['position'].between(*position_range)].copy()
    # Cross-tabulate
    cross = pd.crosstab(df['Germline classification'], df['MutPred2_classification'])
    original = df['Germline classification'].value_counts().reindex(cross.index)

    # Default colors
    if colors is None:
        colors = {
            'Original':   '#AAAAAA',
            'Benign':     '#0072B2',
            'Pathogenic': '#D55E00'
        }

    # Plot setup
    fig, ax = plt.subplots(figsize=figsize)
    plt.rcParams.update({'font.size': tick_fontsize})

    categories = ['Original', 'Benign', 'Pathogenic']
    n_groups = len(cross)
    n_bars = len(categories)
    total_width = bar_width_ratio
    bar_width = total_width / n_bars
    x = np.arange(n_groups)

    # Plot bars
    for i, cat in enumerate(categories):
        counts = original.values if cat == 'Original' else cross.get(cat, pd.Series(0, index=cross.index)).values
        offset = -total_width/2 + i * bar_width + bar_width/2
        positions = x + offset
        ax.bar(positions, counts, bar_width, color=colors[cat], label=cat)
        # Annotations
        for pos, cnt in zip(positions, counts):
            ax.text(pos, cnt + max(original.max(), cross.values.max())*0.02,
                    str(int(cnt)), ha='center', va='bottom', fontsize=annotation_fontsize)

    # Labels and title
    ax.set_xticks(x)
    ax.set_xticklabels(cross.index, rotation=45, ha='right', fontsize=tick_fontsize)
    ax.set_xlabel('Germline classification (Original)', fontsize=label_fontsize)
    ax.set_ylabel('Number of variants', fontsize=label_fontsize)
    ax.set_title(title or f'MutPred2 Reclassification vs. Original\n(Positions {position_range[0]}–{position_range[1]})',
                 fontsize=title_fontsize)

    # Legend above
    handles = [Patch(color=colors[c], label=c) for c in categories]
    ax.legend(handles=handles, title='Category',
              loc='lower center', bbox_to_anchor=(0.5, 1.02),
              ncol=len(handles), frameon=False, fontsize=tick_fontsize, title_fontsize=label_fontsize)

    ax.grid(axis='y', linestyle='--', alpha=0.5)
    plt.tight_layout()
    plt.show()

# Example usage:
if __name__ == "__main__":
    # Load classified MutPred2 results
    path = "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/02_mutpred2/" \
           "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_classified_mutpred2.xlsx"
    df = pd.read_excel(path, engine="openpyxl")
    # Plot with custom styling
    plot_mutpred2_reclassification(
        df,
        position_range=(1, 302),
        figsize=(8, 6),
        title_fontsize=12,
        label_fontsize=10,
        tick_fontsize=12,
        annotation_fontsize=10,
        bar_width_ratio=0.8,
        title="MutPred2 vs. Germline Classification"
    )








# ESM
#!/usr/bin/env python
import os
import requests
import torch
import esm
import pandas as pd
import torch.nn.functional as F

# 1) Paths
DATA_XLSX     = "/project/ealexov/compbio/shamrat/250519_energy/00_data/01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg.xlsx"
OUTPUT_XLSX   = "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/03_esm/cdkl5_esm1v_clinvar_scores.xlsx"

# 2) Load your ClinVar/1KGP dataset
df = pd.read_excel(DATA_XLSX, engine="openpyxl")

# Keep only rows with non-null mutation info
df = df.loc[df['wild'].notna() & df['position'].notna() & df['mutant'].notna(), 
            ['wild','position','mutant']].drop_duplicates()

# Build a standard mutation string: e.g. I3F
df['mutation'] = df['wild'].str.upper() + df['position'].astype(int).astype(str) + df['mutant'].str.upper()
df = df.sort_values('position')

# 3) Fetch wild-type CDKL5 sequence from UniProt
resp = requests.get("https://rest.uniprot.org/uniprot/O76039.fasta")
resp.raise_for_status()
wt_seq = "".join(resp.text.splitlines()[1:]).strip()

# 4) Load the zero-shot variant model (ESM-1v)
device = torch.device('cpu')
model, alphabet = esm.pretrained.esm1v_t33_650M_UR90S_1()
model = model.eval().to(device)
batch_converter = alphabet.get_batch_converter()

def score_sequence(seq: str) -> float:
    """Return sum of per-residue log-probabilities under ESM-1v."""
    _, _, tokens = batch_converter([("cdkl5", seq)])
    tokens = tokens.to(device)
    with torch.no_grad():
        logits = model(tokens)["logits"][0, 1:len(seq)+1]
        logprobs = F.log_softmax(logits, dim=-1)
        aa_idxs = torch.tensor([alphabet.get_idx(a) for a in seq], device=device)
        return logprobs[torch.arange(len(seq)), aa_idxs].sum().item()

# 5) Compute wild-type score once
wt_score = score_sequence(wt_seq)

# 6) Loop over each variant
results = []
for _, row in df.iterrows():
    pos    = int(row['position'])
    wt_aa  = row['wild'].upper()
    mut_aa = row['mutant'].upper()
    mut_id = row['mutation']
    # sanity check
    assert wt_seq[pos-1] == wt_aa, f"WT mismatch at {pos}: found {wt_seq[pos-1]} vs expected {wt_aa}"
    # build the mutant sequence
    mut_seq = wt_seq[:pos-1] + mut_aa + wt_seq[pos:]
    mut_score = score_sequence(mut_seq)
    results.append({
        "mutation":    mut_id,
        "position":    pos,
        "wt_aa":       wt_aa,
        "mut_aa":      mut_aa,
        "wt_score":    wt_score,
        "mut_score":   mut_score,
        "delta_score": mut_score - wt_score
    })

# 7) Save to Excel
out_df = pd.DataFrame(results).sort_values('position')
out_df.to_excel(OUTPUT_XLSX, index=False)

print(f"✅ Written results to {OUTPUT_XLSX}")







# 3 use esm code for esm prediction this need py11 version and 'haddock3_env' has python11 version
# the code is loaded in '03_esm/score_cdkl5_variants.py'



# === 3.2 Merge ESM-1v Δscore into your CDKL5 variants and save ===

import pandas as pd
import os

# 1) Paths to your original variants and the ESM results
variants_xlsx = "/project/ealexov/compbio/shamrat/250519_energy/00_data/" \
                "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg.xlsx"
esm_folder    = "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/03_esm"
esm_results   = os.path.join(esm_folder, "cdkl5_esm1v_scores.xlsx")

# 2) Read in both tables
variants_df = pd.read_excel(variants_xlsx, engine="openpyxl")
esm_df      = pd.read_excel(esm_results,    engine="openpyxl")

# 3) Merge on the mutation string ('mutation' in variants ↔ 'mutation' in esm_df)
merged = variants_df.merge(
    esm_df,
    on="mutation",
    how="left"
)

# 4) Write out a new Excel with “_esm1v” appended
base = os.path.splitext(os.path.basename(variants_xlsx))[0]
out_path = os.path.join(
    esm_folder,
    f"{base}_esm1v.xlsx"
)
merged.to_excel(out_path, index=False)
print(f"Wrote merged ESM-1v annotations to {out_path}")




import pandas as pd

# Path to the merged ESM-1v annotations you just wrote
file_path = (
    "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/03_esm/"
    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_esm1v.xlsx"
)

# Load into a DataFrame
df = pd.read_excel(file_path, engine="openpyxl")

# Print only the column names
print("Columns in merged ESM-1v results:")
print(df.columns.tolist())












import pandas as pd
from IPython.display import display

# Adjust this to your actual file name:
file_path = (
    "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/03_esm/"
    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_esm1v.xlsx"
)

df = pd.read_excel(file_path, engine="openpyxl")

cols_to_display = [
    "mutation",
    "position_x",  # original position from variants
    "Germline classification",
    "wild_score",
    "mut_score",
    "delta_score"
]

print("Displayed columns:")
print(cols_to_display, "\n")

display(df[cols_to_display].head())






import pandas as pd
from IPython.display import display

# Path to your merged ESM-1v annotations file
file_path = (
    "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/03_esm/"
    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_esm1v.xlsx"
)

# Load it
df = pd.read_excel(file_path, engine="openpyxl")

# 1) Preview the first five rows of the key score columns
print("Head of ESM-1v scores:")
display(df[["mutation", "position_x", "wild_score", "mut_score", "delta_score"]].head())

# 2) Show summary statistics for those scores
print("\nSummary statistics for ESM-1v scores:")
display(df[["wild_score", "mut_score", "delta_score"]].describe())











import pandas as pd
import os

# --- Configuration: update infile name if needed ---
esm_folder = "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/03_esm"
# Input filename (must match your merged ESM-1v output)
infile = "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_esm1v.xlsx"
# Output filename with 'classified' inserted before 'esm1v'
outfile = "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_classified_esm1v.xlsx"

in_path = os.path.join(esm_folder, infile)
out_path = os.path.join(esm_folder, outfile)

# 1) Load merged ESM-1v results
df = pd.read_excel(in_path, engine="openpyxl")

# 2) Classify based on delta_score: negative → Pathogenic, else Benign
df['ESM1v_classification'] = df['delta_score'].apply(
    lambda x: 'Pathogenic' if x < 0 else 'Benign'
)

# 3) Save updated DataFrame
df.to_excel(out_path, index=False)
print(f"Wrote classified ESM-1v results to:\n  {out_path}")

# 4) Preview the first five rows with classification
from IPython.display import display
preview_cols = ['mutation', 'position_x', 'delta_score', 'ESM1v_classification']
print("Preview of classified ESM-1v results:")
display(df[preview_cols].head())











import pandas as pd
from IPython.display import display

# 1) Load the classified ESM-1v results
file_path = (
    "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/03_esm/"
    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_classified_esm1v.xlsx"
)
df = pd.read_excel(file_path, engine="openpyxl")

# 2) Restrict to positions 1–302
df = df[df['position_x'].between(1, 302)]

# 3) Cross-tab: counts with totals
cross_counts = pd.crosstab(
    df['Germline classification'],
    df['ESM1v_classification'],
    margins=True,
    margins_name='Total'
)

# 4) Cross-tab: row-wise percentages (excluding Total column)
cross_pct = cross_counts.div(cross_counts['Total'], axis=0).round(2).drop(columns='Total')

# 5) Display
print("Counts:\n")
display(cross_counts)

print("\nPercentages:\n")
display(cross_pct)






import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Patch

# Load ESM-1v classified results
file_path = (
    "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/03_esm/"
    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_classified_esm1v.xlsx"
)
df = pd.read_excel(file_path, engine="openpyxl")

# Filter to positions 1–302
df = df[df['position_x'].between(1, 302)]

# Cross-tabulate: Germline vs ESM1v_classification
cross = pd.crosstab(df['Germline classification'], df['ESM1v_classification'])

# Original counts
original = df['Germline classification'].value_counts().reindex(cross.index)

# Define categories and colors
categories = ['Original', 'Benign', 'Pathogenic']
colors = {
    'Original':   '#AAAAAA',
    'Benign':     '#0072B2',
    'Pathogenic': '#D55E00'
}

# Plot
fig, ax = plt.subplots(figsize=(8, 6))
n_groups = len(cross)
n_bars = len(categories)
total_width = 0.8
bar_width = total_width / n_bars
x = np.arange(n_groups)

for i, cat in enumerate(categories):
    if cat == 'Original':
        counts = original.values
    else:
        counts = cross.get(cat, pd.Series(0, index=cross.index)).values
    offset = -total_width/2 + i * bar_width + bar_width/2
    positions = x + offset
    ax.bar(positions, counts, bar_width, color=colors[cat], label=cat)
    for pos, cnt in zip(positions, counts):
        ax.text(pos, cnt + max(original.max(), cross.values.max())*0.02,
                str(int(cnt)), ha='center', va='bottom')

# Labels and title
ax.set_xticks(x)
ax.set_xticklabels(cross.index, rotation=45, ha='right')
ax.set_xlabel('Germline classification (Original)')
ax.set_ylabel('Number of variants')
ax.set_title('ESM-1v:(Positions 1–302)')

# Legend above
handles = [Patch(color=colors[c], label=c) for c in categories]
ax.legend(handles=handles, title='Category',
          loc='lower center', bbox_to_anchor=(0.5, 1.02),
          ncol=len(handles), frameon=False)

ax.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()





# alphamissense

import pandas as pd

# Corrected file path variable name
alphamissense = '/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/08_alphamissense/AF-O76039-F1-hg38.csv'

# Use read_csv instead of read_excel since it's a .csv file
df = pd.read_csv(alphamissense)

# Display the first 5 rows
print(df.head())





## 08 alphamissense
#!/usr/bin/env python3
import pandas as pd
import os

# ─── Paths ───────────────────────────────────────────────────────────────────
variants_xlsx     = "/project/ealexov/compbio/shamrat/250519_energy/00_data/" \
                    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg.xlsx"
alphamissense_csv = "/project/ealexov/compbio/shamrat/250519_energy/" \
                    "05_pathogenicity/08_alphamissense/AF-O76039-F1-hg38.csv"
out_dir           = "/project/ealexov/compbio/shamrat/250519_energy/" \
                    "05_pathogenicity/08_alphamissense"

# ─── 1. Load data ─────────────────────────────────────────────────────────────
variants_df = pd.read_excel(variants_xlsx, engine="openpyxl")
am_df       = pd.read_csv(alphamissense_csv)

# ─── 2. Normalize merge keys ─────────────────────────────────────────────────
variants_df['mutation']        = variants_df['mutation'].astype(str)
am_df['protein_variant']       = am_df['protein_variant'].astype(str)

# ─── 3. Prepare AlphaMissense lookup ─────────────────────────────────────────
am_small = (
    am_df[['protein_variant', 'am_pathogenicity', 'am_class']]
    .rename(columns={'protein_variant': 'mutation'})
).drop_duplicates('mutation', keep='first')

# ─── 4. Map back onto variants_df ────────────────────────────────────────────
lookup = am_small.set_index('mutation')
variants_df['am_pathogenicity'] = variants_df['mutation'].map(lookup['am_pathogenicity'])
variants_df['am_class']         = variants_df['mutation'].map(lookup['am_class'])

# ─── 5. Quick confirmation ────────────────────────────────────────────────────
total   = len(variants_df)
matched = variants_df['am_pathogenicity'].notna().sum()
print(f"Pulled AlphaMissense results for {matched}/{total} variants.")

# Show a few example rows to confirm correct columns
print(variants_df[['mutation','am_pathogenicity','am_class']].head().to_string(index=False))

# ─── 6. Write out merged Excel ────────────────────────────────────────────────
base     = os.path.splitext(os.path.basename(variants_xlsx))[0]
out_path = os.path.join(out_dir, f"{base}_alphamissense.xlsx")
variants_df.to_excel(out_path, index=False)
print(f"Wrote {total} rows to {out_path}")





import pandas as pd
from IPython.display import display

# Update this to the actual merged AlphaMissense Excel filename
file_path = (
    "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/08_alphamissense/"
    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_alphamissense.xlsx"
)

# Load the merged AlphaMissense results
df_am = pd.read_excel(file_path, engine="openpyxl")

# 1) Print all column names
print("Columns in merged AlphaMissense results:")
print(df_am.columns.tolist(), "\n")

# 2) Preview key columns
cols_to_display = [
    "mutation",
    "position",
    "Germline classification",
    "am_pathogenicity",
    "am_class"
]
print("Preview of AlphaMissense annotations:")
display(df_am[cols_to_display].head())

# 3) Summary stats for the pathogenicity scores
print("\nSummary statistics for AlphaMissense pathogenicity scores:")
display(df_am["am_pathogenicity"].describe())







import pandas as pd
from IPython.display import display

# 1) Load your merged AlphaMissense results
file_path = (
    "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/08_alphamissense/"
    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_alphamissense.xlsx"
)
df_am = pd.read_excel(file_path, engine="openpyxl")

# 2) Filter to positions 1–302 if you like
df_am = df_am[df_am['position'].between(1, 302)]

# 3) Cross-tabulate counts
counts = pd.crosstab(
    df_am['Germline classification'],
    df_am['am_class'],
    margins=True,
    margins_name='Total'
)
print("AlphaMissense reclassification counts:")
display(counts)

# 4) Cross-tabulate percentages (per original Germline row)
pct = counts.div(counts['Total'], axis=0).round(2).drop(columns='Total')
print("\nAlphaMissense reclassification percentages:")
display(pct)






import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Patch

# Load merged AlphaMissense annotations
file_path = (
    "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity/08_alphamissense/"
    "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_alphamissense.xlsx"
)
df = pd.read_excel(file_path, engine="openpyxl")

# Filter to positions 1–302
df = df[df['position'].between(1, 302)]

# Cross-tabulate original vs. AlphaMissense classes
order = ['ambiguous', 'likely_benign', 'likely_pathogenic']
cross = pd.crosstab(df['Germline classification'], df['am_class'])[order]

# Original counts
original = df['Germline classification'].value_counts().reindex(cross.index)

# Plot settings
colors = {
    'Original':        '#AAAAAA',
    'ambiguous':       '#76B7B2',  # muted green
    'likely_benign':   '#0072B2',  # blue
    'likely_pathogenic':'#D55E00' # orange
}

fig, ax = plt.subplots(figsize=(8, 6))
n_groups = len(cross)
n_bars = 1 + len(order)
total_width = 0.8
bar_width = total_width / n_bars
x = np.arange(n_groups)

# Plot grey original
for i, key in enumerate(['Original'] + order):
    if key == 'Original':
        counts = original.values
    else:
        counts = cross[key].values
    offset = -total_width/2 + i * bar_width + bar_width/2
    positions = x + offset
    ax.bar(positions, counts, bar_width, color=colors[key], label=key if key=='Original' else key.replace('_',' ').capitalize())
    for pos, cnt in zip(positions, counts):
        ax.text(pos, cnt + max(original.max(), cross.values.max())*0.02, str(int(cnt)), ha='center', va='bottom')

# Labels & title
ax.set_xticks(x)
ax.set_xticklabels(cross.index, rotation=45, ha='right')
ax.set_xlabel('Germline classification (Original)')
ax.set_ylabel('Number of variants')
ax.set_title('AlphaMissense (Positions 1–302)')

# Legend above plot
handles = [
    Patch(color=colors['Original'], label='Original')
] + [
    Patch(color=colors[k], label=k.replace('_',' ').capitalize()) for k in order
]
ax.legend(handles=handles, title='Category', loc='lower center',
          bbox_to_anchor=(0.5, 1.02), ncol=len(handles), frameon=False)

ax.grid(axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()







# analysis

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def plot_reclassification(ax, cross, original, categories, colors, title):
    total_width = 0.8
    bar_width = total_width / len(categories)
    x = np.arange(len(cross))
    ymax = max(original.max(), cross.values.max())
    
    # Plot bars and annotations
    for i, cat in enumerate(categories):
        counts = (original.values if cat == 'Original'
                  else cross.get(cat, pd.Series(0, index=cross.index)).values)
        offset = -total_width/2 + i*bar_width + bar_width/2
        pos = x + offset
        ax.bar(pos, counts, bar_width, color=colors[cat], label=cat)
        for px, ct in zip(pos, counts):
            ax.text(px, ct + ymax*0.02, str(int(ct)),
                    ha='center', va='bottom', fontsize=8)
    
    # Title
    ax.set_title(title, fontsize=12, pad=20)  # pad to make room for legend
    
    # Legend just above the title
    leg = ax.legend(loc='lower center', bbox_to_anchor=(0.5, 1.10),
                    ncol=len(categories), frameon=False, fontsize=8)
    
    ax.grid(axis='y', linestyle='--', alpha=0.5)

# Base directory
base = "/project/ealexov/compbio/shamrat/250519_energy/05_pathogenicity"

# Method configurations
methods = {
    'PolyPhen-2': {
        'path': os.path.join(base, "01_polyphen2",
                             "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_polyphen2.xlsx"),
        'pred': 'prediction',
        'order': ['benign','possibly damaging','probably damaging'],
        'colors': {
            'Original':           '#AAAAAA',
            'benign':             '#0072B2',
            'possibly damaging':  '#F28E2B',
            'probably damaging':  '#D55E00'
        }
    },
    'MutPred2': {
        'path': os.path.join(base, "02_mutpred2",
                             "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_classified_mutpred2.xlsx"),
        'pred': 'MutPred2_classification',
        'order': ['Benign','Pathogenic'],
        'colors': {
            'Original':   '#AAAAAA',
            'Benign':     '#0072B2',
            'Pathogenic': '#D55E00'
        }
    },
    'ESM-1v': {
        'path': os.path.join(base, "03_esm",
                             "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_classified_esm1v.xlsx"),
        'pred': 'ESM1v_classification',
        'order': ['Benign','Pathogenic'],
        'colors': {
            'Original':   '#AAAAAA',
            'Benign':     '#0072B2',
            'Pathogenic': '#D55E00'
        }
    },
    'AlphaMissense': {
        'path': os.path.join(base, "08_alphamissense",
                             "01_cdkl5_clinvar_gaf_1kgp_hctr_comb_unq_af_noddg_alphamissense.xlsx"),
        'pred': 'am_class',
        'order': ['ambiguous','likely_benign','likely_pathogenic'],
        'colors': {
            'Original':          '#AAAAAA',
            'ambiguous':         '#76B7B2',
            'likely_benign':     '#0072B2',
            'likely_pathogenic':'#D55E00'
        }
    }
}

# Load and prepare data
data = {}
for name, cfg in methods.items():
    df = pd.read_excel(cfg['path'], engine='openpyxl')
    poscol = 'position_x' if 'position_x' in df.columns else 'position'
    df = df[df[poscol].between(1, 302)].copy()
    if name == 'PolyPhen-2':
        df['prediction_clean'] = df['prediction'].str.lower().str.strip()
        predcol = 'prediction_clean'
    else:
        predcol = cfg['pred']
    cross = pd.crosstab(df['Germline classification'], df[predcol])[cfg['order']]
    original = df['Germline classification'].value_counts().reindex(cross.index)
    data[name] = (cross, original, cfg['colors'], cfg['order'])

# Create subplots
fig, axes = plt.subplots(2, 2, figsize=(14, 10), sharey=True)
axes = axes.flatten()

for ax, (method, (cross, original, colors, order)) in zip(axes, data.items()):
    plot_reclassification(
        ax, cross, original,
        categories=['Original'] + order,
        colors=colors,
        title=f"{method} (pos 1–302)"
    )
    # X-axis labels only on bottom row
    if ax.get_subplotspec().is_last_row():
        ax.set_xticks(np.arange(len(cross)))
        ax.set_xticklabels(cross.index, rotation=45, ha='right', fontsize=8)
    else:
        ax.set_xticklabels([])

# Y-axis label on left column
for ax in axes.reshape(2,2)[:,0]:
    ax.set_ylabel("Number of variants")

plt.suptitle("Reclassification Comparison Across Four Methods", fontsize=16, y=0.97)
plt.tight_layout(rect=[0,0,1,0.93])

# Save figure
out_png = os.path.join(base, "reclassification_comparison.png")
plt.savefig(out_png, dpi=300)
plt.show()

print("Saved plot to", out_png)
